# -*- coding: utf-8 -*-
"""Knee osteoarthritis(all algorithms)

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LuM0Sn__OmatYbQao6_rUr6imtjk82H3
"""

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
import numpy as np
import cv2
import os
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score,confusion_matrix,matthews_corrcoef, recall_score, f1_score,classification_report,precision_score
from sklearn.model_selection import GridSearchCV
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.neighbors import KNeighborsClassifier

"""# 1) Convolutional Neural Network (CNN)"""

cd /content/drive/MyDrive/Classroom/MedicalExpert-I

import tensorflow
print(tensorflow.__version__)
accuracy_scores=np.zeros(3)

#Data Preprocessing
import cv2,os
data_path='/content/drive/MyDrive/Classroom/MedicalExpert-I'
categories=os.listdir(data_path)
labels=[i for i in range(len(categories))]

label_dict=dict(zip(categories,labels)) #empty dictionary
print(label_dict)
print(categories)
print(labels)

#Data Preprocessing
img_size=256
data=[]
label=[]

for category in categories:
    folder_path=os.path.join(data_path,category)
    img_names=os.listdir(folder_path)

    for img_name in img_names:
        img_path=os.path.join(folder_path,img_name)
        img=cv2.imread(img_path)
        try:
            gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
            resized=cv2.resize(gray,(img_size,img_size))
            #resizing the image  into 256 x 256, since we need a fixed common size for all the images in the dataset
            data.append(resized)
            label.append(label_dict[category])
            #appending the image and the label(categorized) into the list (dataset)
        except Exception as e:
            print('Exception:',e)
            #if any exception rasied, the exception will be printed here. And pass to the next image

#Recale and assign catagorical labels
import numpy as np
data=np.array(data)/255.0
data=np.reshape(data,(data.shape[0],img_size,img_size,1))
label=np.array(label)
from keras.utils import np_utils
new_label=np_utils.to_categorical(label)

new_label.shape

"""CNN MODEL

"""

data.shape

data.shape[1:]

from keras.models import Sequential
from keras.layers import Dense,Activation,Flatten,Dropout
from keras.layers import Conv2D,MaxPooling2D
from keras.callbacks import ModelCheckpoint

model=Sequential()

model.add(Conv2D(128,(3,3),input_shape=data.shape[1:]))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2,2)))
#The first CNN layer followed by Relu and MaxPooling layers

model.add(Conv2D(64,(3,3)))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2,2)))
#The second convolution layer followed by Relu and MaxPooling layers

model.add(Conv2D(32,(3,3)))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2,2)))
#The thrid convolution layer followed by Relu and MaxPooling layers

model.add(Flatten())
#Flatten layer to stack the output convolutions from 3rd convolution layer
model.add(Dropout(0.2))

model.add(Dense(128,activation='relu'))
#Dense layer of 128 neurons

model.add(Dropout(0.1))
model.add(Dense(64,activation='relu'))
#Dense layer of 64 neurons

model.add(Dense(5,activation='softmax'))
#The Final layer with two outputs for two categories

model.compile(loss='categorical_crossentropy',optimizer='adam',metrics=['accuracy'])

model.summary()

"""Splitting data into traning and testing"""

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(data,new_label,test_size=0.1)

import matplotlib.pyplot as plt
plt.figure(figsize=(10,10))
for i in range(20):
    plt.subplot(5,5,i+1)
    plt.xticks([])
    plt.yticks([])
    plt.grid(False)
    plt.imshow(np.squeeze(x_test[i]))
    plt.xlabel(categories[np.argmax(y_test[i])])
plt.show()

history=model.fit(x_train,y_train,epochs=50,validation_split=0.2)

# plot the training loss and accuracy
N = 50 #number of epochs
plt.style.use("ggplot")
plt.figure()
plt.plot(np.arange(0, N), history.history["loss"], label="train_loss")
plt.plot(np.arange(0, N), history.history["val_loss"], label="val_loss")
plt.plot(np.arange(0, N), history.history["accuracy"], label="train_acc")
plt.plot(np.arange(0, N), history.history["val_accuracy"], label="val_acc")
plt.title("Training Loss and Accuracy")
plt.xlabel("Epoch #")
plt.ylabel("Loss/Accuracy")
plt.legend(loc="center right")

vaL_loss, val_accuracy= model.evaluate(x_test, y_test, verbose=0)
train_loss, train_accuracy= model.evaluate(x_train, y_train, verbose=0)
print("test loss:", vaL_loss,)
print("test accuracy:",val_accuracy*100,"%")
print("train loss:", train_loss)
accuracy_scores[0]=train_accuracy
print("train accuracy:",accuracy_scores[1]*100,"%")

X = 45

img_size = 256

img_single = x_test[X]
img_single = cv2.resize(img_single, (img_size, img_size))
img_single = (np.expand_dims(img_single, 0))
img_single = img_single.reshape(img_single.shape[0],256,256,1)

predictions_single = model.predict(img_single)
print('A.I predicts:',categories[np.argmax(predictions_single)])
print("Correct prediction for label",np.argmax(y_test[X]),'is',categories[np.argmax(y_test[X])])
plt.imshow(np.squeeze(img_single))
plt.grid(False)
plt.show()

from sklearn.metrics import confusion_matrix
from mlxtend.plotting import plot_confusion_matrix

test_labels = np.argmax(y_test, axis=1)
predictions = model.predict(x_test)
predictions = np.argmax(predictions, axis=-1)


cm  = confusion_matrix(test_labels, predictions)
plt.figure()
plot_confusion_matrix(cm,figsize=(12,8), hide_ticks=True,cmap=plt.cm.Blues)
plt.xticks(range(5), ['Normal','Doubtful','Mid','Moderate','Severe'], fontsize=16)
plt.yticks(range(5), ['Normal','Doubtful','Mid','Moderate','Severe'], fontsize=16)
plt.show()

"""# 2) K-Nearest Neighbor (KNN)"""

# Define image directory
img_dir = "/content/drive/MyDrive/Classroom/MedicalExpert-I"

# Define image size
img_size = (100, 100)

# Define image labels
labels = ['0Normal', '1Doubtful', '2Mild', '3Moderate', '4Severe']

# Extract features from images
def extract_features(img_dir, labels):
    features = []
    target = []
    for label in labels:
        folder = os.path.join(img_dir, label)
        for filename in os.listdir(folder):
            img_path = os.path.join(folder, filename)
            img = cv2.imread(img_path, 0) # 0 for grayscale
            img = cv2.resize(img, img_size)
            feature = np.array(img).flatten()
            features.append(feature)
            target.append(label)
    return np.array(features), np.array(target)

# Split data into training and testing sets
features, target = extract_features(img_dir, labels)
X_train, X_test, y_train, y_test = train_test_split(features, target, test_size=0.1, random_state=42)

# Train KNN classifier
knn = KNeighborsClassifier(n_neighbors=1)
knn.fit(X_train, y_train)

# Evaluate model accuracy
y_pred = knn.predict(X_test)
mcc = matthews_corrcoef(y_test, y_pred)
recall = recall_score(y_test, y_pred, average='macro')
f1 = f1_score(y_test, y_pred, average='macro')
precision=precision_score(y_test,y_pred,average='macro')
accuracy_scores[1] = accuracy_score(y_test, y_pred)
print("Accuracy: {:.2f}%".format(accuracy_scores[1] * 100))
print("Precision:",precision)
print("MCC:", mcc)
print("Recall:", recall)
print("F1 Score:", f1)

# Compute the classification report of the KNN classifier
class_report = classification_report(y_test, y_pred)
print("Classification Report:\n", class_report)

# Define a range of k values to test
k_values = range(1, 21)

# Train a KNN classifier for each k value and compute accuracy on the test set
accuracies = []
for k in k_values:
    knn = KNeighborsClassifier(n_neighbors=k)
    knn.fit(X_train, y_train)
    y_pred = knn.predict(X_test)
    acc = accuracy_score(y_test, y_pred)
    accuracies.append(acc)

# Plot the change in accuracy with values of k
plt.plot(k_values, accuracies, 'bo-')
plt.xlabel('Value of K')
plt.ylabel('Accuracy')
plt.title('KNN Classifier Accuracy with Different Values of K')
plt.show()

# Plot confusion matrix
cm = confusion_matrix(y_test, y_pred, labels=labels)
plt.figure()
sns.heatmap(cm, annot=True, cmap='Blues', fmt='g', xticklabels=labels, yticklabels=labels)
plt.title('Confusion Matrix')
plt.xlabel('Predicted Label')
plt.ylabel('True Label')
plt.show()

"""# 3) Random Forest (RF)"""

# Define image directory
img_dir = "/content/drive/MyDrive/Classroom/MedicalExpert-I"

# Define image size
img_size = (100, 100)

# Define image labels
labels = ['0Normal', '1Doubtful', '2Mild', '3Moderate', '4Severe']

# Read images and extract features
def extract_features(img_dir):
    features = []
    target = []
    for label in labels:
        folder = os.path.join(img_dir, label)
        for file in os.listdir(folder):
            img_path = os.path.join(folder, file)
            img = cv2.imread(img_path)
            img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
            img = cv2.resize(img, img_size)
            feature = np.array(img).flatten()
            features.append(feature)
            target.append(label)
    return np.array(features), np.array(target)

# Split data into training and testing sets
features, target = extract_features(img_dir)
X_train, X_test, y_train, y_test = train_test_split(features, target, test_size=0.2, random_state=42)

# Train Random Forest classifier
rfc = RandomForestClassifier(n_estimators=100, random_state=42)
rfc.fit(X_train, y_train)

y_pred = rfc.predict(X_test)

cm = confusion_matrix(y_test, y_pred, labels=labels)
sns.heatmap(cm, annot=True, cmap="Blues", xticklabels=labels, yticklabels=labels)
plt.title("Confusion Matrix")
plt.xlabel("Predicted Label")
plt.ylabel("True Label")
plt.show()

# Evaluate model accuracy,recall,precision,f1 score
y_pred = rfc.predict(X_test)
mcc = matthews_corrcoef(y_test, y_pred)
recall = recall_score(y_test, y_pred, average='macro')
f1 = f1_score(y_test, y_pred, average='macro')
precision=precision_score(y_test,y_pred,average='macro')
accuracy_scores[2] = accuracy_score(y_test, y_pred)
print("Accuracy: {:.2f}%".format(accuracy_scores[2] * 100))
print("Precision:",precision)
print("MCC:", mcc)
print("Recall:", recall)
print("F1 Score:", f1)

print(classification_report(y_test, y_pred))

#Comparison Of accuracies of all three algorithms for detecting Knee Osteoarthritis
import matplotlib.cm as cm
plt.figure(figsize=(12,8))
colors = cm.rainbow(np.linspace(0, 1, 3))
labels = ['Convolutional Neural Network', 'K-Nearest Neighbors', 'Random Forest']
plt.bar(labels,
        accuracy_scores,
        color = colors)
plt.xlabel('Classifiers',fontsize=18)
plt.ylabel('Accuracy',fontsize=18)
plt.title('Accuracy of various algorithms',fontsize=20)
plt.xticks(rotation=45,fontsize=12)
plt.yticks(fontsize=12)
